Name:             atp-haskell
Version:          1.5.3
Synopsis:         Translation from Ocaml to Haskell of John Harrison's ATP code
Description:      This package is a translation from OCaml to Haskell of
                  the automated theorem prover written in OCaml in
                  John Harrison's book "Practical Logic and Automated
                  Reasoning".
Homepage:         https://github.com/seereason/atp-haskell
License-File:     LICENSE.txt
Author:           John Harrison, David Fox <dsf@seereason.com>
Maintainer:       David Fox <dsf@seereason.com>
Bug-Reports:      https://github.com/seereason/atp-haskell/issues
Category:         Logic, Theorem Provers
Cabal-version:    >= 1.9
Build-Type:       Simple
Extra-Source-Files: tests/Extra.hs

flag tests-and-instances
  Description:
    Omit all the test cases and all the concrete types (Formula, FOL,
    Term, V, Predicate, etc.)  This has been used for debugging to
    make sure none of the type variables accidentally get bound to a
    particular implementation.
  Manual: True
  Default: True

Library
  Build-Depends: applicative-extras, base, containers, hashable, HUnit, mtl, parsec, pretty >= 1.1.2, syb, template-haskell
  GHC-options: -Wall -O2
  if !flag(tests-and-instances)
    CPP-Options: -DNOTESTS
  Hs-Source-Dirs: src
  Exposed-Modules:
    ATP
    Lib
    Pretty
    Formulas
    --
    Lit
    Prop
    PropExamples
    DefCNF
    DP
    -- Stal
    -- BDD
    FOL
    Parser
    Skolem
    Herbrand
    Unif
    Tableaux
    Resolution
    Prolog
    Meson
    -- Skolems
    Equal
    -- Cong
    -- Rewrite
    -- Order
    -- Completion
    -- Eqelim
    -- Paramodulation
    --
    -- Decidable
    -- Qelim
    -- Cooper
    -- Complex
    -- Real
    -- Grobner
    -- Geom
    -- Interpolation
    -- Combining

    -- Lcf
    -- Lcfprop
    -- Folderived
    -- Lcffol
    -- Tactics

    -- Limitations

Test-Suite atp-haskell-tests
  if !flag(tests-and-instances)
    Buildable: False
  Type: exitcode-stdio-1.0
  Hs-Source-Dirs: tests
  Main-Is: Main.hs
  Build-Depends: applicative-extras, atp-haskell, base, containers, HUnit, time
  GHC-options: -Wall -O2
